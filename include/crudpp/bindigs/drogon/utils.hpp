#pragma once

#include <format>

#include <json/value.h>
#include <trantor/utils/Date.h>

namespace drgn
{
// adapted from models autogenerated by drogon_ctl

std::chrono::sys_days from_drgn_date(const std::string&& str)
{
    struct tm stm;
    memset(&stm,0,sizeof(stm));
    strptime(str.c_str(),"%Y-%m-%d",&stm);
    const auto t = std::chrono::system_clock::from_time_t(mktime(&stm));
    return std::chrono::time_point_cast<std::chrono::days>(t);
}

std::chrono::sys_seconds from_drgn_time(const std::string&& str)
{
    struct tm stm;
    memset(&stm,0,sizeof(stm));
    auto p = strptime(str.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
    const auto t = std::chrono::system_clock::from_time_t(mktime(&stm));
    return std::chrono::time_point_cast<std::chrono::seconds>(t);
}

std::chrono::sys_time<std::chrono::milliseconds> from_drgn_time_ms(const std::string&& str)
{
    struct tm stm;
    memset(&stm,0,sizeof(stm));
    auto p = strptime(str.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
    time_t t = mktime(&stm);
    size_t decimalNum = 0;
    if(p)
    {
        if(*p=='.')
        {
            std::string decimals(p+1,str[str.length()]);
            while(decimals.length()<6)
            {
                decimals += "0";
            }
            decimalNum = (size_t)atol(decimals.c_str());
        }

        t *= 1000000+decimalNum;
    }

    const auto tp = std::chrono::system_clock::from_time_t(t);
    return std::chrono::time_point_cast<std::chrono::milliseconds>(tp);
}

template <typename T>
T to_drgn(T v)
    requires std::integral<T>
{ return v; }

template <typename T>
int to_drgn(T v)
    requires std::is_enum_v<T>
{ return (int)v; }

template <typename T>
T to_drgn(const T& v)
    requires std::floating_point<T>
{ return v; }

template <typename T>
std::string to_drgn(const T& v)
    requires std::same_as<T, std::string>
{ return v; }

std::string to_drgn(const std::chrono::sys_days& d)
{ return std::format("%Y-%m-%d", d); }

std::string to_drgn(const std::chrono::sys_seconds& d)
{ return std::format("%Y-%m-%d %H:%M:%S", d); }

std::string to_drgn(const std::chrono::sys_time<std::chrono::milliseconds>& d)
{ return std::format("%Y-%m-%d %H:%M:%S.%z", d); }
} // namespace drgn
