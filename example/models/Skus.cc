/**
 *
 *  Skus.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Skus.h"
#include "Products.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::example;

const std::string Skus::Cols::_unit = "unit";
const std::string Skus::Cols::_product_id = "product_id";
const std::string Skus::primaryKeyName = "";
const bool Skus::hasPrimaryKey = false;
const std::string Skus::tableName = "skus";

const std::vector<typename Skus::MetaData> Skus::metaData_={
{"unit","std::string","char(8)",0,0,0,0},
{"product_id","int32_t","int(11)",4,0,0,0}
};
const std::string &Skus::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Skus::Skus(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["unit"].isNull())
        {
            unit_=std::make_shared<std::string>(r["unit"].as<std::string>());
        }
        if(!r["product_id"].isNull())
        {
            productId_=std::make_shared<int32_t>(r["product_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            unit_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            productId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Skus::Skus(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            unit_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

Skus::Skus(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("unit"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["unit"].isNull())
        {
            unit_=std::make_shared<std::string>(pJson["unit"].asString());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson["product_id"].asInt64());
        }
    }
}

void Skus::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            unit_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

void Skus::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("unit"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["unit"].isNull())
        {
            unit_=std::make_shared<std::string>(pJson["unit"].asString());
        }
    }
    if(pJson.isMember("product_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["product_id"].isNull())
        {
            productId_=std::make_shared<int32_t>((int32_t)pJson["product_id"].asInt64());
        }
    }
}

const std::string &Skus::getValueOfUnit() const noexcept
{
    const static std::string defaultValue = std::string();
    if(unit_)
        return *unit_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Skus::getUnit() const noexcept
{
    return unit_;
}
void Skus::setUnit(const std::string &pUnit) noexcept
{
    unit_ = std::make_shared<std::string>(pUnit);
    dirtyFlag_[0] = true;
}
void Skus::setUnit(std::string &&pUnit) noexcept
{
    unit_ = std::make_shared<std::string>(std::move(pUnit));
    dirtyFlag_[0] = true;
}
void Skus::setUnitToNull() noexcept
{
    unit_.reset();
    dirtyFlag_[0] = true;
}

const int32_t &Skus::getValueOfProductId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(productId_)
        return *productId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Skus::getProductId() const noexcept
{
    return productId_;
}
void Skus::setProductId(const int32_t &pProductId) noexcept
{
    productId_ = std::make_shared<int32_t>(pProductId);
    dirtyFlag_[1] = true;
}
void Skus::setProductIdToNull() noexcept
{
    productId_.reset();
    dirtyFlag_[1] = true;
}

void Skus::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Skus::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "unit",
        "product_id"
    };
    return inCols;
}

void Skus::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUnit())
        {
            binder << getValueOfUnit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Skus::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Skus::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUnit())
        {
            binder << getValueOfUnit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProductId())
        {
            binder << getValueOfProductId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Skus::toJson() const
{
    Json::Value ret;
    if(getUnit())
    {
        ret["unit"]=getValueOfUnit();
    }
    else
    {
        ret["unit"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    return ret;
}

Json::Value Skus::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUnit())
            {
                ret[pMasqueradingVector[0]]=getValueOfUnit();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProductId())
            {
                ret[pMasqueradingVector[1]]=getValueOfProductId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUnit())
    {
        ret["unit"]=getValueOfUnit();
    }
    else
    {
        ret["unit"]=Json::Value();
    }
    if(getProductId())
    {
        ret["product_id"]=getValueOfProductId();
    }
    else
    {
        ret["product_id"]=Json::Value();
    }
    return ret;
}

bool Skus::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("unit"))
    {
        if(!validJsonOfField(0, "unit", pJson["unit"], err, true))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(1, "product_id", pJson["product_id"], err, true))
            return false;
    }
    return true;
}
bool Skus::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Skus::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("unit"))
    {
        if(!validJsonOfField(0, "unit", pJson["unit"], err, false))
            return false;
    }
    if(pJson.isMember("product_id"))
    {
        if(!validJsonOfField(1, "product_id", pJson["product_id"], err, false))
            return false;
    }
    return true;
}
bool Skus::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Skus::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

Products Skus::getProduct(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Products>> pro(new std::promise<Products>);
    std::future<Products> f = pro->get_future();
    getProduct(clientPtr, [&pro] (Products result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Skus::getProduct(const DbClientPtr &clientPtr,
                      const std::function<void(Products)> &rcb,
                      const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from products where id = ?";
    *clientPtr << sql
               << *productId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Products(r[0]));
                    }
               }
               >> ecb;
}
